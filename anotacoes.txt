- Entendendo a LogBox

Amarela = Alertas / recomendação, não quebram a aplicação.
Vermelha = Erro que quebra a aplicação.

- Entendendo Componentização

    Benefícios
        Reutilização de código
        Produtividade
        Isolamento de contexto
        Legibilidade do código
        Redução da complexidade
        Arquivos menores
        Padronização de projeto

- ScroolView X FlatList

    ScroolView

        Carrega todos componentes / elementos da lista, mesmo não estando visíveis
        Recomendada para listas pequenas, menus por exemplo

        "Rendeniza todos os seus componentes filhos de reação de uma só vez, mas isso tem uma
        desvantagem de desempenho."

    FlatList

        Carrega somente componentes / elementos exibidos em tela
        Os demais, rendeniza quando for disponibilizado para visualização em tela
        Recomendada para listas grandes

        "Rendeniza itens lentamente, quando eles estão prestes a aparecer e remove itens que rolam
        para fora da tela para economizar memória e tempo de processamento."

- Hooks

    Permite que você use estados e outros recursos do React sem escrever uma classe.
    Encapsula funcionalidades e facilita o reaproveitamento da sua lógica.

    useState
        criar e acessar estados
    useEffect
        dispara determinada lógica quando a interface for rendenizada
        também pode ser vinculado a estados, para quando o estado vinculado ao useEffect
            sofrer alteração, dispare a lógica que esta dentro do useEffect novamente

    Nome dos Hooks tem uma padronização
        useNomeDoHook

- Imutabilidade
    Duas maneiras de alterar dados:
        A primeira é mutar o dado diretamente seu valor.
        A segunda maneira é substituir o dado antigo por uma nova cópia com as alterações desejadas.

    Detectar Mudanças
        Detectar mudanças e objetos mutados é dificil, pois eles são modificados diretamente.
        Essa detecção requer um objeto mutado para ser comparado com as cópias das suas
            próprias versões e a árvore inteira do object para ser cruzada.

    Benefício
        Como os dados imutáveis podem determinar facilmente se ocorreram alterações, isso
            também ajuda a determinar quando um componente deve ser rendenizado novamente.

- 